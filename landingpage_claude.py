import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configuration de la page
st.set_page_config(page_title="Analyse des Sites Web - Pr√©sentation au Comit√©", layout="wide")

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    columns = [
        "Sites internet", "Vitesse de chargement", "Compatibilit√© multiplateforme",
        "Optimisation des images", "Navigation intuitive", "Design responsive",
        "Appels √† l'action (CTA)", "Certificat SSL", "Protection contre les attaques",
        "Balises Meta", "Open graph personnalis√©", "Int√©gration des r√©seaux sociaux"
    ]
    # Assurez-vous que le chemin du fichier est correct
    df = pd.read_excel("data_sites_web.xlsx", usecols=columns)
    df.set_index('Sites internet', inplace=True)
    return df

# Charger les donn√©es
try:
    df = load_data()
except Exception as e:
    st.error(f"Erreur lors du chargement des donn√©es: {e}")
    st.stop()

# Fonction pour cr√©er un graphique de performance globale
def create_performance_chart(data):
    performance = data.mean().sort_values(ascending=False)
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.barplot(x=performance.index, y=performance.values, ax=ax)
    ax.set_title("Performance Moyenne par Crit√®re", fontsize=16)
    ax.set_xlabel("Crit√®res", fontsize=12)
    ax.set_ylabel("Score Moyen", fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    return fig

# Fonction pour cr√©er un heatmap de corr√©lation
def create_correlation_heatmap(data):
    corr = data.corr()
    fig, ax = plt.subplots(figsize=(12, 10))
    sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax, fmt='.2f')
    ax.set_title("Matrice de Corr√©lation des Crit√®res", fontsize=16)
    plt.tight_layout()
    return fig

# Titre et introduction
st.title("üìä Analyse des Performances des Sites Web")
st.markdown("""
    Cette pr√©sentation offre un aper√ßu d√©taill√© des performances de nos sites web
    bas√© sur des crit√®res cl√©s. Notre objectif est d'identifier les forces et les axes
    d'am√©lioration pour optimiser notre pr√©sence en ligne.
""")

# M√©triques cl√©s
st.header("üîë Indicateurs Cl√©s de Performance")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Nombre de Sites Analys√©s", len(df))
col2.metric("Vitesse de Chargement Moyenne", f"{df['Vitesse de chargement'].mean():.2f}")
col3.metric("Score de Compatibilit√© Moyen", f"{df['Compatibilit√© multiplateforme'].mean():.2f}")
col4.metric("Score SSL Moyen", f"{df['Certificat SSL'].mean():.2f}")

# Graphique de performance globale
st.header("üìà Performance Globale par Crit√®re")
performance_chart = create_performance_chart(df)
st.pyplot(performance_chart)
st.markdown("""
    Ce graphique pr√©sente la performance moyenne de nos sites web pour chaque crit√®re √©valu√©.
    Il nous permet d'identifier rapidement nos points forts et nos axes d'am√©lioration.
""")

# Matrice de corr√©lation
st.header("üîó Corr√©lations entre les Crit√®res")
correlation_heatmap = create_correlation_heatmap(df)
st.pyplot(correlation_heatmap)
st.markdown("""
    La matrice de corr√©lation ci-dessus illustre les relations entre les diff√©rents crit√®res.
    Une corr√©lation forte (proche de 1 ou -1) indique que deux crit√®res √©voluent souvent ensemble,
    tandis qu'une corr√©lation faible (proche de 0) sugg√®re une ind√©pendance relative.
""")

# Analyse des top performers
st.header("üèÜ Analyse des Sites les Plus Performants")
top_performers = df.mean(axis=1).nlargest(5)
st.dataframe(df.loc[top_performers.index])
st.markdown("""
    Ce tableau pr√©sente nos 5 sites les plus performants en moyenne sur tous les crit√®res.
    Ces sites peuvent servir de mod√®les pour l'am√©lioration des autres.
""")

# Comparaison des sites
st.header("üîç Comparaison D√©taill√©e des Sites")
selected_sites = st.multiselect("S√©lectionnez des sites √† comparer", df.index.tolist(), default=df.index[:3].tolist())
if selected_sites:
    comparison_df = df.loc[selected_sites]
    fig, ax = plt.subplots(figsize=(12, 6))
    comparison_df.T.plot(kind='bar', ax=ax)
    ax.set_title("Comparaison des Sites S√©lectionn√©s", fontsize=16)
    ax.set_xlabel("Crit√®res", fontsize=12)
    ax.set_ylabel("Score", fontsize=12)
    plt.xticks(rotation=45, ha='right')
    ax.legend(title="Sites", bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    st.pyplot(fig)
    st.markdown("""
        Ce graphique permet de comparer directement les performances des sites s√©lectionn√©s
        sur tous les crit√®res. Utilisez cette visualisation pour identifier les forces sp√©cifiques
        de chaque site et les domaines n√©cessitant une am√©lioration.
    """)

# Recommandations et Conclusion (inchang√©s)

# Pied de page
st.markdown("---")
st.markdown("Pr√©par√© par l'√©quipe d'analyse web | Donn√©es mises √† jour le 21/10/2024")
